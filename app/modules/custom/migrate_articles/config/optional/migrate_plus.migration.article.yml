# This migration demonstrates a simple import from a JSON file.
id: article
label: JSON feed of articles
migration_group: Article
migration_tags:
  - json article
source:
  # We use the JSON source plugin.
  plugin: url
  # In this example we get data from a local file, to get data from a URL
  # define http as data_fetcher_plugin.
  # data_fetcher_plugin: http
  data_fetcher_plugin: http
  data_parser_plugin: json
  # The data_parser normally limits the fields passed on to the source plugin
  # to fields configured to be used as part of the migration. To support more
  # dynamic migrations, the JSON data parser supports including the original
  # data for the current row. Simply include the 'include_raw_data' flag set
  # to `true` to enable this. This option is disabled by default to minimize
  # memory footprint for migrations that do not need this capability.
  # include_raw_data: true
  # Flags whether to track changes to incoming data. If TRUE, we will maintain
  # hashed source rows to determine whether incoming data has changed.
  # track_changes: true
  # Copy the example JSON file in artifacts folder to sites/default/files folder.
  urls:
    - https://gist.githubusercontent.com/kieranjones/44d71c01636b004c1b8d5857f7bc0e24/raw/ffc1ab327d23a805b5a62fbe3d681e8e3cb78e15/data-feed.json
  # An xpath-like selector corresponding to the items to be imported.
  item_selector: data
  # Under 'fields', we list the data items to be imported. The first level keys
  # are the source field names we want to populate (the names to be used as
  # sources in the process configuration below). For each field we're importing,
  # we provide a label (optional - this is for display in migration tools) and
  # an xpath for retrieving that value. It's important to note that this xpath
  # is relative to the elements retrieved by item_selector.
  fields:
    -
      name: id
      label: 'Article ID'
      selector: id
    -
      name: summary_body
      label: 'Summary content'
      selector: contentSummary
      display_summary: true
    -
      name: title
      label: 'Article name'
      selector: contentTitle
    -
      name: field_source
      label: 'Source of the article'
      selector: source
    -
      name: path
      label: 'Article url'
      selector: url
    -
      name: field_image
      label: 'Article image'
      selector: contentImageUrl
    -
      name: created
      label: 'Created date'
      selector: pageDateCreated
    -
      name: body_content
      label: 'Body'
      selector: content
  # Under 'ids', we identify source fields populated above which will uniquely
  ids:
    id:
      type: string
  # identify each imported item. The 'type' makes sure the migration map table
  # uses the proper schema type for stored the IDs.
process:
  # Note that the source field names here (name, description and price) were
  # defined by the 'fields' configuration for the source plugin above.
  type:
    plugin: default_value
    default_value: article
  title: title
  field_id: id
  field_source:
    -
      plugin: skip_on_empty
      source: created
      method: process
    -
      plugin: entity_generate
      source: field_source
      value_key: name
      bundle_key: vid
      bundle: article
      entity_type: taxonomy_term
      ignore_case: true
      destination_field: null
      values:
        name: field_source
  field_url: path
  'body/value':
    plugin: default_value
    default_value: ''
  'body/summary': summary_body
  created:
    -
      plugin: skip_on_empty
      source: created
      method: process
    -
      plugin: article_date_converter
      source: created
  sticky:
    plugin: default_value
    default_value: 0
  uid:
    plugin: default_value
    default_value: 0
  #  field_image: field_image
destination:
  plugin: 'entity:node'
migration_dependencies: {  }
dependencies:
  enforced:
    module:
      - migrate_articles
